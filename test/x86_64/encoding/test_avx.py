# This file is auto-generated by /codegen/x86_64_test_encoding.py
# Reference opcodes are generated by:
#     GNU assembler (GNU Binutils) 2.25

from peachpy.x86_64 import *
import unittest


class TestVMOVSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x10, 0x4C, 0xCC, 0x9D]), VMOVSS(xmm1, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7A, 0x11, 0x74, 0xCC, 0x9D]), VMOVSS(dword[r12 + rcx*8 - 99], xmm14).encode())
        self.assertEqual(bytearray([0xC5, 0x8A, 0x10, 0xCB]), VMOVSS(xmm1, xmm14, xmm3).encode())


class TestVEXTRACTPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x63, 0x79, 0x17, 0xF5, 0x02]), VEXTRACTPS(ebp, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0x43, 0x79, 0x17, 0x74, 0xCC, 0x9D, 0x02]), VEXTRACTPS(dword[r12 + rcx*8 - 99], xmm14, 2).encode())


class TestVINSERTPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x21, 0xCB, 0x02]), VINSERTPS(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x21, 0x4C, 0xCC, 0x9D, 0x02]), VINSERTPS(xmm1, xmm14, dword[r12 + rcx*8 - 99], 2).encode())


class TestVADDSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x58, 0xCB]), VADDSS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x58, 0x4C, 0xCC, 0x9D]), VADDSS(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())


class TestVSUBSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x5C, 0xCB]), VSUBSS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x5C, 0x4C, 0xCC, 0x9D]), VSUBSS(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())


class TestVMULSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x59, 0xCB]), VMULSS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x59, 0x4C, 0xCC, 0x9D]), VMULSS(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())


class TestVDIVSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x5E, 0xCB]), VDIVSS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x5E, 0x4C, 0xCC, 0x9D]), VDIVSS(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())


class TestVSQRTSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x51, 0xCB]), VSQRTSS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x51, 0x4C, 0xCC, 0x9D]), VSQRTSS(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())


class TestVROUNDSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x0A, 0xCB, 0x02]), VROUNDSS(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x0A, 0x4C, 0xCC, 0x9D, 0x02]), VROUNDSS(xmm1, xmm14, dword[r12 + rcx*8 - 99], 2).encode())


class TestVMINSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x5D, 0xCB]), VMINSS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x5D, 0x4C, 0xCC, 0x9D]), VMINSS(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())


class TestVMAXSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x5F, 0xCB]), VMAXSS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x5F, 0x4C, 0xCC, 0x9D]), VMAXSS(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())


class TestVRCPSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x53, 0xCB]), VRCPSS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x53, 0x4C, 0xCC, 0x9D]), VRCPSS(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())


class TestVRSQRTSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x52, 0xCB]), VRSQRTSS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x52, 0x4C, 0xCC, 0x9D]), VRSQRTSS(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())


class TestVCMPSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0xC2, 0xCB, 0x02]), VCMPSS(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0xC2, 0x4C, 0xCC, 0x9D, 0x02]), VCMPSS(xmm1, xmm14, dword[r12 + rcx*8 - 99], 2).encode())


class TestVCOMISS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x2F, 0xCE]), VCOMISS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x2F, 0x4C, 0xCC, 0x9D]), VCOMISS(xmm1, dword[r12 + rcx*8 - 99]).encode())


class TestVUCOMISS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x2E, 0xCE]), VUCOMISS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x2E, 0x4C, 0xCC, 0x9D]), VUCOMISS(xmm1, dword[r12 + rcx*8 - 99]).encode())


class TestVMOVSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0x10, 0x4C, 0xD3, 0xA8]), VMOVSD(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7B, 0x11, 0x74, 0xD3, 0xA8]), VMOVSD(qword[r11 + rdx*8 - 88], xmm14).encode())
        self.assertEqual(bytearray([0xC5, 0x8B, 0x10, 0xCB]), VMOVSD(xmm1, xmm14, xmm3).encode())


class TestVADDSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x58, 0xCB]), VADDSD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x58, 0x4C, 0xD3, 0xA8]), VADDSD(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVSUBSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x5C, 0xCB]), VSUBSD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x5C, 0x4C, 0xD3, 0xA8]), VSUBSD(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVMULSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x59, 0xCB]), VMULSD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x59, 0x4C, 0xD3, 0xA8]), VMULSD(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVDIVSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x5E, 0xCB]), VDIVSD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x5E, 0x4C, 0xD3, 0xA8]), VDIVSD(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVSQRTSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x51, 0xCB]), VSQRTSD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x51, 0x4C, 0xD3, 0xA8]), VSQRTSD(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVROUNDSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x0B, 0xCB, 0x02]), VROUNDSD(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x0B, 0x4C, 0xD3, 0xA8, 0x02]), VROUNDSD(xmm1, xmm14, qword[r11 + rdx*8 - 88], 2).encode())


class TestVMINSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x5D, 0xCB]), VMINSD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x5D, 0x4C, 0xD3, 0xA8]), VMINSD(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVMAXSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x5F, 0xCB]), VMAXSD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x5F, 0x4C, 0xD3, 0xA8]), VMAXSD(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVCMPSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0xC2, 0xCB, 0x02]), VCMPSD(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0xC2, 0x4C, 0xD3, 0xA8, 0x02]), VCMPSD(xmm1, xmm14, qword[r11 + rdx*8 - 88], 2).encode())


class TestVCOMISD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x2F, 0xCE]), VCOMISD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x2F, 0x4C, 0xD3, 0xA8]), VCOMISD(xmm1, qword[r11 + rdx*8 - 88]).encode())


class TestVUCOMISD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x2E, 0xCE]), VUCOMISD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x2E, 0x4C, 0xD3, 0xA8]), VUCOMISD(xmm1, qword[r11 + rdx*8 - 88]).encode())


class TestVMOVAPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x78, 0x29, 0xF1]), VMOVAPS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x28, 0x4C, 0xC2, 0xB3]), VMOVAPS(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x7C, 0x29, 0xFA]), VMOVAPS(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x28, 0x54, 0xD9, 0xBE]), VMOVAPS(ymm2, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x78, 0x29, 0x74, 0xC2, 0xB3]), VMOVAPS(oword[r10 + rax*8 - 77], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7C, 0x29, 0x7C, 0xD9, 0xBE]), VMOVAPS(hword[r9 + rbx*8 - 66], ymm15).encode())


class TestVMOVUPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x78, 0x11, 0xF1]), VMOVUPS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x10, 0x4C, 0xC2, 0xB3]), VMOVUPS(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x7C, 0x11, 0xFA]), VMOVUPS(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x10, 0x54, 0xD9, 0xBE]), VMOVUPS(ymm2, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x78, 0x11, 0x74, 0xC2, 0xB3]), VMOVUPS(oword[r10 + rax*8 - 77], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7C, 0x11, 0x7C, 0xD9, 0xBE]), VMOVUPS(hword[r9 + rbx*8 - 66], ymm15).encode())


class TestVMOVLPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x41, 0x78, 0x13, 0x74, 0xD3, 0xA8]), VMOVLPS(qword[r11 + rdx*8 - 88], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x12, 0x4C, 0xD3, 0xA8]), VMOVLPS(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVMOVHPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x41, 0x78, 0x17, 0x74, 0xD3, 0xA8]), VMOVHPS(qword[r11 + rdx*8 - 88], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x16, 0x4C, 0xD3, 0xA8]), VMOVHPS(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVMASKMOVPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x2C, 0x4C, 0xC2, 0xB3]), VMASKMOVPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x2C, 0x54, 0xD9, 0xBE]), VMASKMOVPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x2E, 0x5C, 0xC2, 0xB3]), VMASKMOVPS(oword[r10 + rax*8 - 77], xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x2E, 0x64, 0xD9, 0xBE]), VMASKMOVPS(hword[r9 + rbx*8 - 66], ymm15, ymm4).encode())


class TestVMOVMSKPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x50, 0xEE]), VMOVMSKPS(ebp, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x50, 0xEF]), VMOVMSKPS(ebp, ymm15).encode())


class TestVMOVNTPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x41, 0x78, 0x2B, 0x74, 0xC2, 0xB3]), VMOVNTPS(oword[r10 + rax*8 - 77], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7C, 0x2B, 0x7C, 0xD9, 0xBE]), VMOVNTPS(hword[r9 + rbx*8 - 66], ymm15).encode())


class TestVBROADCASTSS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x18, 0xCE]), VBROADCASTSS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x18, 0x4C, 0xCC, 0x9D]), VBROADCASTSS(xmm1, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x18, 0xD6]), VBROADCASTSS(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x18, 0x54, 0xCC, 0x9D]), VBROADCASTSS(ymm2, dword[r12 + rcx*8 - 99]).encode())


class TestVMOVSLDUP(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x12, 0xCE]), VMOVSLDUP(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x12, 0x4C, 0xC2, 0xB3]), VMOVSLDUP(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0x12, 0xD7]), VMOVSLDUP(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0x12, 0x54, 0xD9, 0xBE]), VMOVSLDUP(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVMOVSHDUP(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x16, 0xCE]), VMOVSHDUP(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x16, 0x4C, 0xC2, 0xB3]), VMOVSHDUP(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0x16, 0xD7]), VMOVSHDUP(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0x16, 0x54, 0xD9, 0xBE]), VMOVSHDUP(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVGATHERDPS(unittest.TestCase):
    def runTest(self):
        pass


class TestVGATHERQPS(unittest.TestCase):
    def runTest(self):
        pass


class TestVMOVAPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x79, 0x29, 0xF1]), VMOVAPD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x28, 0x4C, 0xC2, 0xB3]), VMOVAPD(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x7D, 0x29, 0xFA]), VMOVAPD(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x28, 0x54, 0xD9, 0xBE]), VMOVAPD(ymm2, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x79, 0x29, 0x74, 0xC2, 0xB3]), VMOVAPD(oword[r10 + rax*8 - 77], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7D, 0x29, 0x7C, 0xD9, 0xBE]), VMOVAPD(hword[r9 + rbx*8 - 66], ymm15).encode())


class TestVMOVUPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x79, 0x11, 0xF1]), VMOVUPD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x10, 0x4C, 0xC2, 0xB3]), VMOVUPD(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x7D, 0x11, 0xFA]), VMOVUPD(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x10, 0x54, 0xD9, 0xBE]), VMOVUPD(ymm2, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x79, 0x11, 0x74, 0xC2, 0xB3]), VMOVUPD(oword[r10 + rax*8 - 77], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7D, 0x11, 0x7C, 0xD9, 0xBE]), VMOVUPD(hword[r9 + rbx*8 - 66], ymm15).encode())


class TestVMOVLPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x41, 0x79, 0x13, 0x74, 0xD3, 0xA8]), VMOVLPD(qword[r11 + rdx*8 - 88], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x12, 0x4C, 0xD3, 0xA8]), VMOVLPD(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVMOVHPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x41, 0x79, 0x17, 0x74, 0xD3, 0xA8]), VMOVHPD(qword[r11 + rdx*8 - 88], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x16, 0x4C, 0xD3, 0xA8]), VMOVHPD(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVMASKMOVPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x2D, 0x4C, 0xC2, 0xB3]), VMASKMOVPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x2D, 0x54, 0xD9, 0xBE]), VMASKMOVPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x2F, 0x5C, 0xC2, 0xB3]), VMASKMOVPD(oword[r10 + rax*8 - 77], xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x2F, 0x64, 0xD9, 0xBE]), VMASKMOVPD(hword[r9 + rbx*8 - 66], ymm15, ymm4).encode())


class TestVMOVMSKPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x50, 0xEE]), VMOVMSKPD(ebp, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x50, 0xEF]), VMOVMSKPD(ebp, ymm15).encode())


class TestVMOVNTPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x41, 0x79, 0x2B, 0x74, 0xC2, 0xB3]), VMOVNTPD(oword[r10 + rax*8 - 77], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7D, 0x2B, 0x7C, 0xD9, 0xBE]), VMOVNTPD(hword[r9 + rbx*8 - 66], ymm15).encode())


class TestVBROADCASTSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x19, 0xD6]), VBROADCASTSD(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x19, 0x54, 0xD3, 0xA8]), VBROADCASTSD(ymm2, qword[r11 + rdx*8 - 88]).encode())


class TestVMOVDDUP(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0x12, 0xCE]), VMOVDDUP(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0x12, 0x4C, 0xD3, 0xA8]), VMOVDDUP(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7F, 0x12, 0xD7]), VMOVDDUP(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7F, 0x12, 0x54, 0xD9, 0xBE]), VMOVDDUP(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVGATHERDPD(unittest.TestCase):
    def runTest(self):
        pass


class TestVGATHERQPD(unittest.TestCase):
    def runTest(self):
        pass


class TestVADDPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x58, 0xCB]), VADDPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x58, 0x4C, 0xC2, 0xB3]), VADDPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x58, 0xD4]), VADDPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x58, 0x54, 0xD9, 0xBE]), VADDPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVHADDPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x7C, 0xCB]), VHADDPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x7C, 0x4C, 0xC2, 0xB3]), VHADDPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x87, 0x7C, 0xD4]), VHADDPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x07, 0x7C, 0x54, 0xD9, 0xBE]), VHADDPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVSUBPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x5C, 0xCB]), VSUBPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x5C, 0x4C, 0xC2, 0xB3]), VSUBPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x5C, 0xD4]), VSUBPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x5C, 0x54, 0xD9, 0xBE]), VSUBPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVHSUBPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x7D, 0xCB]), VHSUBPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x7D, 0x4C, 0xC2, 0xB3]), VHSUBPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x87, 0x7D, 0xD4]), VHSUBPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x07, 0x7D, 0x54, 0xD9, 0xBE]), VHSUBPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVADDSUBPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0xD0, 0xCB]), VADDSUBPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0xD0, 0x4C, 0xC2, 0xB3]), VADDSUBPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x87, 0xD0, 0xD4]), VADDSUBPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x07, 0xD0, 0x54, 0xD9, 0xBE]), VADDSUBPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVMULPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x59, 0xCB]), VMULPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x59, 0x4C, 0xC2, 0xB3]), VMULPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x59, 0xD4]), VMULPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x59, 0x54, 0xD9, 0xBE]), VMULPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVDIVPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x5E, 0xCB]), VDIVPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x5E, 0x4C, 0xC2, 0xB3]), VDIVPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x5E, 0xD4]), VDIVPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x5E, 0x54, 0xD9, 0xBE]), VDIVPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVSQRTPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x51, 0xCE]), VSQRTPS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x51, 0x4C, 0xC2, 0xB3]), VSQRTPS(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x51, 0xD7]), VSQRTPS(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x51, 0x54, 0xD9, 0xBE]), VSQRTPS(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVADDPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x58, 0xCB]), VADDPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x58, 0x4C, 0xC2, 0xB3]), VADDPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x58, 0xD4]), VADDPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x58, 0x54, 0xD9, 0xBE]), VADDPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVHADDPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x7C, 0xCB]), VHADDPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x7C, 0x4C, 0xC2, 0xB3]), VHADDPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x7C, 0xD4]), VHADDPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x7C, 0x54, 0xD9, 0xBE]), VHADDPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVSUBPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x5C, 0xCB]), VSUBPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x5C, 0x4C, 0xC2, 0xB3]), VSUBPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x5C, 0xD4]), VSUBPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x5C, 0x54, 0xD9, 0xBE]), VSUBPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVHSUBPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x7D, 0xCB]), VHSUBPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x7D, 0x4C, 0xC2, 0xB3]), VHSUBPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x7D, 0xD4]), VHSUBPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x7D, 0x54, 0xD9, 0xBE]), VHSUBPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVADDSUBPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xD0, 0xCB]), VADDSUBPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xD0, 0x4C, 0xC2, 0xB3]), VADDSUBPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xD0, 0xD4]), VADDSUBPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xD0, 0x54, 0xD9, 0xBE]), VADDSUBPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVMULPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x59, 0xCB]), VMULPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x59, 0x4C, 0xC2, 0xB3]), VMULPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x59, 0xD4]), VMULPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x59, 0x54, 0xD9, 0xBE]), VMULPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVDIVPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x5E, 0xCB]), VDIVPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x5E, 0x4C, 0xC2, 0xB3]), VDIVPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x5E, 0xD4]), VDIVPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x5E, 0x54, 0xD9, 0xBE]), VDIVPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVSQRTPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x51, 0xCE]), VSQRTPD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x51, 0x4C, 0xC2, 0xB3]), VSQRTPD(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x51, 0xD7]), VSQRTPD(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x51, 0x54, 0xD9, 0xBE]), VSQRTPD(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVROUNDPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x08, 0xCE, 0x02]), VROUNDPS(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x08, 0x4C, 0xC2, 0xB3, 0x02]), VROUNDPS(xmm1, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x7D, 0x08, 0xD7, 0x02]), VROUNDPS(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x7D, 0x08, 0x54, 0xD9, 0xBE, 0x02]), VROUNDPS(ymm2, hword[r9 + rbx*8 - 66], 2).encode())


class TestVMINPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x5D, 0xCB]), VMINPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x5D, 0x4C, 0xC2, 0xB3]), VMINPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x5D, 0xD4]), VMINPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x5D, 0x54, 0xD9, 0xBE]), VMINPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVMAXPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x5F, 0xCB]), VMAXPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x5F, 0x4C, 0xC2, 0xB3]), VMAXPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x5F, 0xD4]), VMAXPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x5F, 0x54, 0xD9, 0xBE]), VMAXPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVRCPPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x53, 0xCE]), VRCPPS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x53, 0x4C, 0xC2, 0xB3]), VRCPPS(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x53, 0xD7]), VRCPPS(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x53, 0x54, 0xD9, 0xBE]), VRCPPS(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVRSQRTPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x52, 0xCE]), VRSQRTPS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x52, 0x4C, 0xC2, 0xB3]), VRSQRTPS(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x52, 0xD7]), VRSQRTPS(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x52, 0x54, 0xD9, 0xBE]), VRSQRTPS(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVDPPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x40, 0xCB, 0x02]), VDPPS(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x40, 0x4C, 0xC2, 0xB3, 0x02]), VDPPS(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x40, 0xD4, 0x02]), VDPPS(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x40, 0x54, 0xD9, 0xBE, 0x02]), VDPPS(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVCMPPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0xC2, 0xCB, 0x02]), VCMPPS(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0xC2, 0x4C, 0xC2, 0xB3, 0x02]), VCMPPS(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0xC2, 0xD4, 0x02]), VCMPPS(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0xC2, 0x54, 0xD9, 0xBE, 0x02]), VCMPPS(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVTESTPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x0E, 0xCE]), VTESTPS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x0E, 0x4C, 0xC2, 0xB3]), VTESTPS(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x0E, 0xD7]), VTESTPS(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x0E, 0x54, 0xD9, 0xBE]), VTESTPS(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVROUNDPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x09, 0xCE, 0x02]), VROUNDPD(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x09, 0x4C, 0xC2, 0xB3, 0x02]), VROUNDPD(xmm1, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x7D, 0x09, 0xD7, 0x02]), VROUNDPD(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x7D, 0x09, 0x54, 0xD9, 0xBE, 0x02]), VROUNDPD(ymm2, hword[r9 + rbx*8 - 66], 2).encode())


class TestVMINPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x5D, 0xCB]), VMINPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x5D, 0x4C, 0xC2, 0xB3]), VMINPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x5D, 0xD4]), VMINPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x5D, 0x54, 0xD9, 0xBE]), VMINPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVMAXPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x5F, 0xCB]), VMAXPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x5F, 0x4C, 0xC2, 0xB3]), VMAXPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x5F, 0xD4]), VMAXPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x5F, 0x54, 0xD9, 0xBE]), VMAXPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVDPPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x41, 0xCB, 0x02]), VDPPD(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x41, 0x4C, 0xC2, 0xB3, 0x02]), VDPPD(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())


class TestVCMPPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xC2, 0xCB, 0x02]), VCMPPD(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xC2, 0x4C, 0xC2, 0xB3, 0x02]), VCMPPD(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xC2, 0xD4, 0x02]), VCMPPD(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xC2, 0x54, 0xD9, 0xBE, 0x02]), VCMPPD(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVTESTPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x0F, 0xCE]), VTESTPD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x0F, 0x4C, 0xC2, 0xB3]), VTESTPD(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x0F, 0xD7]), VTESTPD(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x0F, 0x54, 0xD9, 0xBE]), VTESTPD(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVANDPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x54, 0xCB]), VANDPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x54, 0x4C, 0xC2, 0xB3]), VANDPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x54, 0xD4]), VANDPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x54, 0x54, 0xD9, 0xBE]), VANDPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVANDNPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x55, 0xCB]), VANDNPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x55, 0x4C, 0xC2, 0xB3]), VANDNPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x55, 0xD4]), VANDNPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x55, 0x54, 0xD9, 0xBE]), VANDNPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVORPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x56, 0xCB]), VORPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x56, 0x4C, 0xC2, 0xB3]), VORPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x56, 0xD4]), VORPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x56, 0x54, 0xD9, 0xBE]), VORPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVXORPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x57, 0xCB]), VXORPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x57, 0x4C, 0xC2, 0xB3]), VXORPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x57, 0xD4]), VXORPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x57, 0x54, 0xD9, 0xBE]), VXORPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVBLENDPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x0C, 0xCB, 0x02]), VBLENDPS(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x0C, 0x4C, 0xC2, 0xB3, 0x02]), VBLENDPS(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x0C, 0xD4, 0x02]), VBLENDPS(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x0C, 0x54, 0xD9, 0xBE, 0x02]), VBLENDPS(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVBLENDVPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x4A, 0xCB, 0x90]), VBLENDVPS(xmm1, xmm14, xmm3, xmm9).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x4A, 0x4C, 0xC2, 0xB3, 0x90]), VBLENDVPS(xmm1, xmm14, oword[r10 + rax*8 - 77], xmm9).encode())
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x4A, 0xD4, 0xA0]), VBLENDVPS(ymm2, ymm15, ymm4, ymm10).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x4A, 0x54, 0xD9, 0xBE, 0xA0]), VBLENDVPS(ymm2, ymm15, hword[r9 + rbx*8 - 66], ymm10).encode())


class TestVANDPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x54, 0xCB]), VANDPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x54, 0x4C, 0xC2, 0xB3]), VANDPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x54, 0xD4]), VANDPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x54, 0x54, 0xD9, 0xBE]), VANDPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVANDNPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x55, 0xCB]), VANDNPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x55, 0x4C, 0xC2, 0xB3]), VANDNPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x55, 0xD4]), VANDNPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x55, 0x54, 0xD9, 0xBE]), VANDNPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVORPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x56, 0xCB]), VORPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x56, 0x4C, 0xC2, 0xB3]), VORPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x56, 0xD4]), VORPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x56, 0x54, 0xD9, 0xBE]), VORPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVXORPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x57, 0xCB]), VXORPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x57, 0x4C, 0xC2, 0xB3]), VXORPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x57, 0xD4]), VXORPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x57, 0x54, 0xD9, 0xBE]), VXORPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVBLENDPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x0D, 0xCB, 0x02]), VBLENDPD(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x0D, 0x4C, 0xC2, 0xB3, 0x02]), VBLENDPD(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x0D, 0xD4, 0x02]), VBLENDPD(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x0D, 0x54, 0xD9, 0xBE, 0x02]), VBLENDPD(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVBLENDVPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x4B, 0xCB, 0x90]), VBLENDVPD(xmm1, xmm14, xmm3, xmm9).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x4B, 0x4C, 0xC2, 0xB3, 0x90]), VBLENDVPD(xmm1, xmm14, oword[r10 + rax*8 - 77], xmm9).encode())
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x4B, 0xD4, 0xA0]), VBLENDVPD(ymm2, ymm15, ymm4, ymm10).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x4B, 0x54, 0xD9, 0xBE, 0xA0]), VBLENDVPD(ymm2, ymm15, hword[r9 + rbx*8 - 66], ymm10).encode())


class TestVUNPCKLPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x14, 0xCB]), VUNPCKLPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x14, 0x4C, 0xC2, 0xB3]), VUNPCKLPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x14, 0xD4]), VUNPCKLPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x14, 0x54, 0xD9, 0xBE]), VUNPCKLPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVUNPCKHPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x15, 0xCB]), VUNPCKHPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0x15, 0x4C, 0xC2, 0xB3]), VUNPCKHPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0x15, 0xD4]), VUNPCKHPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0x15, 0x54, 0xD9, 0xBE]), VUNPCKHPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVMOVLHPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x16, 0xCB]), VMOVLHPS(xmm1, xmm14, xmm3).encode())


class TestVMOVHLPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0x12, 0xCB]), VMOVHLPS(xmm1, xmm14, xmm3).encode())


class TestVSHUFPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x88, 0xC6, 0xCB, 0x02]), VSHUFPS(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x08, 0xC6, 0x4C, 0xC2, 0xB3, 0x02]), VSHUFPS(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC5, 0x84, 0xC6, 0xD4, 0x02]), VSHUFPS(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x04, 0xC6, 0x54, 0xD9, 0xBE, 0x02]), VSHUFPS(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPERMPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x16, 0xD4]), VPERMPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x16, 0x54, 0xD9, 0xBE]), VPERMPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPERMILPS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x04, 0xCE, 0x02]), VPERMILPS(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x0C, 0xCB]), VPERMILPS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x0C, 0x4C, 0xC2, 0xB3]), VPERMILPS(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x04, 0x4C, 0xC2, 0xB3, 0x02]), VPERMILPS(xmm1, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x7D, 0x04, 0xD7, 0x02]), VPERMILPS(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x0C, 0xD4]), VPERMILPS(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x0C, 0x54, 0xD9, 0xBE]), VPERMILPS(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x7D, 0x04, 0x54, 0xD9, 0xBE, 0x02]), VPERMILPS(ymm2, hword[r9 + rbx*8 - 66], 2).encode())


class TestVUNPCKLPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x14, 0xCB]), VUNPCKLPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x14, 0x4C, 0xC2, 0xB3]), VUNPCKLPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x14, 0xD4]), VUNPCKLPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x14, 0x54, 0xD9, 0xBE]), VUNPCKLPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVUNPCKHPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x15, 0xCB]), VUNPCKHPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x15, 0x4C, 0xC2, 0xB3]), VUNPCKHPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x15, 0xD4]), VUNPCKHPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x15, 0x54, 0xD9, 0xBE]), VUNPCKHPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVSHUFPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xC6, 0xCB, 0x02]), VSHUFPD(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xC6, 0x4C, 0xC2, 0xB3, 0x02]), VSHUFPD(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xC6, 0xD4, 0x02]), VSHUFPD(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xC6, 0x54, 0xD9, 0xBE, 0x02]), VSHUFPD(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPERMPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC3, 0xFD, 0x01, 0xD7, 0x02]), VPERMPD(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0xFD, 0x01, 0x54, 0xD9, 0xBE, 0x02]), VPERMPD(ymm2, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPERMILPD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x05, 0xCE, 0x02]), VPERMILPD(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x0D, 0xCB]), VPERMILPD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x0D, 0x4C, 0xC2, 0xB3]), VPERMILPD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x05, 0x4C, 0xC2, 0xB3, 0x02]), VPERMILPD(xmm1, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x7D, 0x05, 0xD7, 0x02]), VPERMILPD(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x0D, 0xD4]), VPERMILPD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x0D, 0x54, 0xD9, 0xBE]), VPERMILPD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x7D, 0x05, 0x54, 0xD9, 0xBE, 0x02]), VPERMILPD(ymm2, hword[r9 + rbx*8 - 66], 2).encode())


class TestVMOVD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x79, 0x7E, 0xF5]), VMOVD(ebp, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x6E, 0xC8]), VMOVD(xmm1, r8d).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x6E, 0x4C, 0xCC, 0x9D]), VMOVD(xmm1, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x79, 0x7E, 0x74, 0xCC, 0x9D]), VMOVD(dword[r12 + rcx*8 - 99], xmm14).encode())


class TestVMOVQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x61, 0xF9, 0x7E, 0xF1]), VMOVQ(rcx, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0xF9, 0x6E, 0xCF]), VMOVQ(xmm1, r15).encode())
        self.assertEqual(bytearray([0xC5, 0x79, 0xD6, 0xF1]), VMOVQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x7E, 0x4C, 0xD3, 0xA8]), VMOVQ(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x79, 0xD6, 0x74, 0xD3, 0xA8]), VMOVQ(qword[r11 + rdx*8 - 88], xmm14).encode())


class TestVMOVDQA(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x79, 0x7F, 0xF1]), VMOVDQA(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x6F, 0x4C, 0xC2, 0xB3]), VMOVDQA(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x7D, 0x7F, 0xFA]), VMOVDQA(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x6F, 0x54, 0xD9, 0xBE]), VMOVDQA(ymm2, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x79, 0x7F, 0x74, 0xC2, 0xB3]), VMOVDQA(oword[r10 + rax*8 - 77], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7D, 0x7F, 0x7C, 0xD9, 0xBE]), VMOVDQA(hword[r9 + rbx*8 - 66], ymm15).encode())


class TestVMOVDQU(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x7A, 0x7F, 0xF1]), VMOVDQU(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x6F, 0x4C, 0xC2, 0xB3]), VMOVDQU(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x7E, 0x7F, 0xFA]), VMOVDQU(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0x6F, 0x54, 0xD9, 0xBE]), VMOVDQU(ymm2, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7A, 0x7F, 0x74, 0xC2, 0xB3]), VMOVDQU(oword[r10 + rax*8 - 77], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7E, 0x7F, 0x7C, 0xD9, 0xBE]), VMOVDQU(hword[r9 + rbx*8 - 66], ymm15).encode())


class TestVLDDQU(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0xF0, 0x4C, 0xC2, 0xB3]), VLDDQU(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7F, 0xF0, 0x54, 0xD9, 0xBE]), VLDDQU(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVPMASKMOVD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x8C, 0x4C, 0xC2, 0xB3]), VPMASKMOVD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x8C, 0x54, 0xD9, 0xBE]), VPMASKMOVD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x8E, 0x5C, 0xC2, 0xB3]), VPMASKMOVD(oword[r10 + rax*8 - 77], xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x8E, 0x64, 0xD9, 0xBE]), VPMASKMOVD(hword[r9 + rbx*8 - 66], ymm15, ymm4).encode())


class TestVPMASKMOVQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x89, 0x8C, 0x4C, 0xC2, 0xB3]), VPMASKMOVQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x85, 0x8C, 0x54, 0xD9, 0xBE]), VPMASKMOVQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x89, 0x8E, 0x5C, 0xC2, 0xB3]), VPMASKMOVQ(oword[r10 + rax*8 - 77], xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x85, 0x8E, 0x64, 0xD9, 0xBE]), VPMASKMOVQ(hword[r9 + rbx*8 - 66], ymm15, ymm4).encode())


class TestVMASKMOVDQU(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0xF7, 0xCE]), VMASKMOVDQU(xmm1, xmm14).encode())


class TestVMOVNTDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x41, 0x79, 0xE7, 0x74, 0xC2, 0xB3]), VMOVNTDQ(oword[r10 + rax*8 - 77], xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0x41, 0x7D, 0xE7, 0x7C, 0xD9, 0xBE]), VMOVNTDQ(hword[r9 + rbx*8 - 66], ymm15).encode())


class TestVMOVNTDQA(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x2A, 0x4C, 0xC2, 0xB3]), VMOVNTDQA(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x2A, 0x54, 0xD9, 0xBE]), VMOVNTDQA(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVPMOVSXBW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x20, 0xCE]), VPMOVSXBW(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x20, 0x4C, 0xD3, 0xA8]), VPMOVSXBW(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x20, 0xD6]), VPMOVSXBW(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x20, 0x54, 0xC2, 0xB3]), VPMOVSXBW(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVPMOVSXBD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x21, 0xCE]), VPMOVSXBD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x21, 0x4C, 0xCC, 0x9D]), VPMOVSXBD(xmm1, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x21, 0xD6]), VPMOVSXBD(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x21, 0x54, 0xD3, 0xA8]), VPMOVSXBD(ymm2, qword[r11 + rdx*8 - 88]).encode())


class TestVPMOVSXBQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x22, 0xCE]), VPMOVSXBQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x22, 0x4C, 0xED, 0x95]), VPMOVSXBQ(xmm1, word[r13 + rbp*8 - 107]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x22, 0xD6]), VPMOVSXBQ(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x22, 0x54, 0xCC, 0x9D]), VPMOVSXBQ(ymm2, dword[r12 + rcx*8 - 99]).encode())


class TestVPMOVSXWD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x23, 0xCE]), VPMOVSXWD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x23, 0x4C, 0xD3, 0xA8]), VPMOVSXWD(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x23, 0xD6]), VPMOVSXWD(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x23, 0x54, 0xC2, 0xB3]), VPMOVSXWD(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVPMOVSXWQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x24, 0xCE]), VPMOVSXWQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x24, 0x4C, 0xCC, 0x9D]), VPMOVSXWQ(xmm1, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x24, 0xD6]), VPMOVSXWQ(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x24, 0x54, 0xD3, 0xA8]), VPMOVSXWQ(ymm2, qword[r11 + rdx*8 - 88]).encode())


class TestVPMOVSXDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x25, 0xCE]), VPMOVSXDQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x25, 0x4C, 0xD3, 0xA8]), VPMOVSXDQ(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x25, 0xD6]), VPMOVSXDQ(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x25, 0x54, 0xC2, 0xB3]), VPMOVSXDQ(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVPMOVZXBW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x30, 0xCE]), VPMOVZXBW(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x30, 0x4C, 0xD3, 0xA8]), VPMOVZXBW(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x30, 0xD6]), VPMOVZXBW(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x30, 0x54, 0xC2, 0xB3]), VPMOVZXBW(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVPMOVZXBD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x31, 0xCE]), VPMOVZXBD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x31, 0x4C, 0xCC, 0x9D]), VPMOVZXBD(xmm1, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x31, 0xD6]), VPMOVZXBD(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x31, 0x54, 0xD3, 0xA8]), VPMOVZXBD(ymm2, qword[r11 + rdx*8 - 88]).encode())


class TestVPMOVZXBQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x32, 0xCE]), VPMOVZXBQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x32, 0x4C, 0xED, 0x95]), VPMOVZXBQ(xmm1, word[r13 + rbp*8 - 107]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x32, 0xD6]), VPMOVZXBQ(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x32, 0x54, 0xCC, 0x9D]), VPMOVZXBQ(ymm2, dword[r12 + rcx*8 - 99]).encode())


class TestVPMOVZXWD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x33, 0xCE]), VPMOVZXWD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x33, 0x4C, 0xD3, 0xA8]), VPMOVZXWD(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x33, 0xD6]), VPMOVZXWD(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x33, 0x54, 0xC2, 0xB3]), VPMOVZXWD(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVPMOVZXWQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x34, 0xCE]), VPMOVZXWQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x34, 0x4C, 0xCC, 0x9D]), VPMOVZXWQ(xmm1, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x34, 0xD6]), VPMOVZXWQ(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x34, 0x54, 0xD3, 0xA8]), VPMOVZXWQ(ymm2, qword[r11 + rdx*8 - 88]).encode())


class TestVPMOVZXDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x35, 0xCE]), VPMOVZXDQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x35, 0x4C, 0xD3, 0xA8]), VPMOVZXDQ(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x35, 0xD6]), VPMOVZXDQ(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x35, 0x54, 0xC2, 0xB3]), VPMOVZXDQ(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVPEXTRB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x63, 0x79, 0x14, 0xF5, 0x02]), VPEXTRB(ebp, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0x43, 0x79, 0x14, 0x74, 0xBE, 0x85, 0x02]), VPEXTRB(byte[r14 + rdi*4 - 123], xmm14, 2).encode())


class TestVPEXTRW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0xC5, 0xEE, 0x02]), VPEXTRW(ebp, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0x43, 0x79, 0x15, 0x74, 0xED, 0x95, 0x02]), VPEXTRW(word[r13 + rbp*8 - 107], xmm14, 2).encode())


class TestVPEXTRD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x63, 0x79, 0x16, 0xF5, 0x02]), VPEXTRD(ebp, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0x43, 0x79, 0x16, 0x74, 0xCC, 0x9D, 0x02]), VPEXTRD(dword[r12 + rcx*8 - 99], xmm14, 2).encode())


class TestVPEXTRQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x63, 0xF9, 0x16, 0xF1, 0x02]), VPEXTRQ(rcx, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0x43, 0xF9, 0x16, 0x74, 0xD3, 0xA8, 0x02]), VPEXTRQ(qword[r11 + rdx*8 - 88], xmm14, 2).encode())


class TestVPINSRB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x20, 0xC8, 0x02]), VPINSRB(xmm1, xmm14, eax, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x20, 0x4C, 0xBE, 0x85, 0x02]), VPINSRB(xmm1, xmm14, byte[r14 + rdi*4 - 123], 2).encode())


class TestVPINSRW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xC4, 0xC8, 0x02]), VPINSRW(xmm1, xmm14, eax, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xC4, 0x4C, 0xED, 0x95, 0x02]), VPINSRW(xmm1, xmm14, word[r13 + rbp*8 - 107], 2).encode())


class TestVPINSRD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x22, 0xC8, 0x02]), VPINSRD(xmm1, xmm14, eax, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x22, 0x4C, 0xCC, 0x9D, 0x02]), VPINSRD(xmm1, xmm14, dword[r12 + rcx*8 - 99], 2).encode())


class TestVPINSRQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x89, 0x22, 0xC8, 0x02]), VPINSRQ(xmm1, xmm14, rax, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x89, 0x22, 0x4C, 0xD3, 0xA8, 0x02]), VPINSRQ(xmm1, xmm14, qword[r11 + rdx*8 - 88], 2).encode())


class TestVPGATHERDD(unittest.TestCase):
    def runTest(self):
        pass


class TestVPGATHERDQ(unittest.TestCase):
    def runTest(self):
        pass


class TestVPGATHERQD(unittest.TestCase):
    def runTest(self):
        pass


class TestVPGATHERQQ(unittest.TestCase):
    def runTest(self):
        pass


class TestVPTEST(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x17, 0xCE]), VPTEST(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x17, 0x4C, 0xC2, 0xB3]), VPTEST(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x17, 0xD7]), VPTEST(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x17, 0x54, 0xD9, 0xBE]), VPTEST(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVPMOVMSKB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0xD7, 0xEE]), VPMOVMSKB(ebp, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0xD7, 0xEF]), VPMOVMSKB(ebp, ymm15).encode())


class TestVPADDB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xFC, 0xCB]), VPADDB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xFC, 0x4C, 0xC2, 0xB3]), VPADDB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xFC, 0xD4]), VPADDB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xFC, 0x54, 0xD9, 0xBE]), VPADDB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPADDW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xFD, 0xCB]), VPADDW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xFD, 0x4C, 0xC2, 0xB3]), VPADDW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xFD, 0xD4]), VPADDW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xFD, 0x54, 0xD9, 0xBE]), VPADDW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPADDD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xFE, 0xCB]), VPADDD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xFE, 0x4C, 0xC2, 0xB3]), VPADDD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xFE, 0xD4]), VPADDD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xFE, 0x54, 0xD9, 0xBE]), VPADDD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPADDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xD4, 0xCB]), VPADDQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xD4, 0x4C, 0xC2, 0xB3]), VPADDQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xD4, 0xD4]), VPADDQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xD4, 0x54, 0xD9, 0xBE]), VPADDQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPADDSB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xEC, 0xCB]), VPADDSB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xEC, 0x4C, 0xC2, 0xB3]), VPADDSB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xEC, 0xD4]), VPADDSB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xEC, 0x54, 0xD9, 0xBE]), VPADDSB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPADDSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xED, 0xCB]), VPADDSW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xED, 0x4C, 0xC2, 0xB3]), VPADDSW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xED, 0xD4]), VPADDSW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xED, 0x54, 0xD9, 0xBE]), VPADDSW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPADDUSB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xDC, 0xCB]), VPADDUSB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xDC, 0x4C, 0xC2, 0xB3]), VPADDUSB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xDC, 0xD4]), VPADDUSB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xDC, 0x54, 0xD9, 0xBE]), VPADDUSB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPADDUSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xDD, 0xCB]), VPADDUSW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xDD, 0x4C, 0xC2, 0xB3]), VPADDUSW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xDD, 0xD4]), VPADDUSW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xDD, 0x54, 0xD9, 0xBE]), VPADDUSW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPHADDW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x01, 0xCB]), VPHADDW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x01, 0x4C, 0xC2, 0xB3]), VPHADDW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x01, 0xD4]), VPHADDW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x01, 0x54, 0xD9, 0xBE]), VPHADDW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPHADDD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x02, 0xCB]), VPHADDD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x02, 0x4C, 0xC2, 0xB3]), VPHADDD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x02, 0xD4]), VPHADDD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x02, 0x54, 0xD9, 0xBE]), VPHADDD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPHADDSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x03, 0xCB]), VPHADDSW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x03, 0x4C, 0xC2, 0xB3]), VPHADDSW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x03, 0xD4]), VPHADDSW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x03, 0x54, 0xD9, 0xBE]), VPHADDSW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSUBB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xF8, 0xCB]), VPSUBB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xF8, 0x4C, 0xC2, 0xB3]), VPSUBB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xF8, 0xD4]), VPSUBB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xF8, 0x54, 0xD9, 0xBE]), VPSUBB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSUBW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xF9, 0xCB]), VPSUBW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xF9, 0x4C, 0xC2, 0xB3]), VPSUBW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xF9, 0xD4]), VPSUBW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xF9, 0x54, 0xD9, 0xBE]), VPSUBW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSUBD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xFA, 0xCB]), VPSUBD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xFA, 0x4C, 0xC2, 0xB3]), VPSUBD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xFA, 0xD4]), VPSUBD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xFA, 0x54, 0xD9, 0xBE]), VPSUBD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSUBQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xFB, 0xCB]), VPSUBQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xFB, 0x4C, 0xC2, 0xB3]), VPSUBQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xFB, 0xD4]), VPSUBQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xFB, 0x54, 0xD9, 0xBE]), VPSUBQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSUBSB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xE8, 0xCB]), VPSUBSB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xE8, 0x4C, 0xC2, 0xB3]), VPSUBSB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xE8, 0xD4]), VPSUBSB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xE8, 0x54, 0xD9, 0xBE]), VPSUBSB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSUBSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xE9, 0xCB]), VPSUBSW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xE9, 0x4C, 0xC2, 0xB3]), VPSUBSW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xE9, 0xD4]), VPSUBSW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xE9, 0x54, 0xD9, 0xBE]), VPSUBSW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSUBUSB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xD8, 0xCB]), VPSUBUSB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xD8, 0x4C, 0xC2, 0xB3]), VPSUBUSB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xD8, 0xD4]), VPSUBUSB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xD8, 0x54, 0xD9, 0xBE]), VPSUBUSB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSUBUSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xD9, 0xCB]), VPSUBUSW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xD9, 0x4C, 0xC2, 0xB3]), VPSUBUSW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xD9, 0xD4]), VPSUBUSW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xD9, 0x54, 0xD9, 0xBE]), VPSUBUSW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPHSUBW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x05, 0xCB]), VPHSUBW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x05, 0x4C, 0xC2, 0xB3]), VPHSUBW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x05, 0xD4]), VPHSUBW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x05, 0x54, 0xD9, 0xBE]), VPHSUBW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPHSUBD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x06, 0xCB]), VPHSUBD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x06, 0x4C, 0xC2, 0xB3]), VPHSUBD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x06, 0xD4]), VPHSUBD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x06, 0x54, 0xD9, 0xBE]), VPHSUBD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPHSUBSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x07, 0xCB]), VPHSUBSW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x07, 0x4C, 0xC2, 0xB3]), VPHSUBSW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x07, 0xD4]), VPHSUBSW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x07, 0x54, 0xD9, 0xBE]), VPHSUBSW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMAXSB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x3C, 0xCB]), VPMAXSB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x3C, 0x4C, 0xC2, 0xB3]), VPMAXSB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x3C, 0xD4]), VPMAXSB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x3C, 0x54, 0xD9, 0xBE]), VPMAXSB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMAXSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xEE, 0xCB]), VPMAXSW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xEE, 0x4C, 0xC2, 0xB3]), VPMAXSW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xEE, 0xD4]), VPMAXSW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xEE, 0x54, 0xD9, 0xBE]), VPMAXSW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMAXSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x3D, 0xCB]), VPMAXSD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x3D, 0x4C, 0xC2, 0xB3]), VPMAXSD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x3D, 0xD4]), VPMAXSD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x3D, 0x54, 0xD9, 0xBE]), VPMAXSD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMAXUB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xDE, 0xCB]), VPMAXUB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xDE, 0x4C, 0xC2, 0xB3]), VPMAXUB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xDE, 0xD4]), VPMAXUB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xDE, 0x54, 0xD9, 0xBE]), VPMAXUB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMAXUW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x3E, 0xCB]), VPMAXUW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x3E, 0x4C, 0xC2, 0xB3]), VPMAXUW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x3E, 0xD4]), VPMAXUW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x3E, 0x54, 0xD9, 0xBE]), VPMAXUW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMAXUD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x3F, 0xCB]), VPMAXUD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x3F, 0x4C, 0xC2, 0xB3]), VPMAXUD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x3F, 0xD4]), VPMAXUD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x3F, 0x54, 0xD9, 0xBE]), VPMAXUD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMINSB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x38, 0xCB]), VPMINSB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x38, 0x4C, 0xC2, 0xB3]), VPMINSB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x38, 0xD4]), VPMINSB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x38, 0x54, 0xD9, 0xBE]), VPMINSB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMINSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xEA, 0xCB]), VPMINSW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xEA, 0x4C, 0xC2, 0xB3]), VPMINSW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xEA, 0xD4]), VPMINSW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xEA, 0x54, 0xD9, 0xBE]), VPMINSW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMINSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x39, 0xCB]), VPMINSD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x39, 0x4C, 0xC2, 0xB3]), VPMINSD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x39, 0xD4]), VPMINSD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x39, 0x54, 0xD9, 0xBE]), VPMINSD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMINUB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xDA, 0xCB]), VPMINUB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xDA, 0x4C, 0xC2, 0xB3]), VPMINUB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xDA, 0xD4]), VPMINUB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xDA, 0x54, 0xD9, 0xBE]), VPMINUB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMINUW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x3A, 0xCB]), VPMINUW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x3A, 0x4C, 0xC2, 0xB3]), VPMINUW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x3A, 0xD4]), VPMINUW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x3A, 0x54, 0xD9, 0xBE]), VPMINUW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMINUD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x3B, 0xCB]), VPMINUD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x3B, 0x4C, 0xC2, 0xB3]), VPMINUD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x3B, 0xD4]), VPMINUD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x3B, 0x54, 0xD9, 0xBE]), VPMINUD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSLLW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x71, 0x71, 0xF6, 0x02]), VPSLLW(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x89, 0xF1, 0xCB]), VPSLLW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xF1, 0x4C, 0xC2, 0xB3]), VPSLLW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x6D, 0x71, 0xF7, 0x02]), VPSLLW(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xF1, 0xD3]), VPSLLW(ymm2, ymm15, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xF1, 0x54, 0xC2, 0xB3]), VPSLLW(ymm2, ymm15, oword[r10 + rax*8 - 77]).encode())


class TestVPSLLD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x71, 0x72, 0xF6, 0x02]), VPSLLD(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x89, 0xF2, 0xCB]), VPSLLD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xF2, 0x4C, 0xC2, 0xB3]), VPSLLD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x6D, 0x72, 0xF7, 0x02]), VPSLLD(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xF2, 0xD3]), VPSLLD(ymm2, ymm15, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xF2, 0x54, 0xC2, 0xB3]), VPSLLD(ymm2, ymm15, oword[r10 + rax*8 - 77]).encode())


class TestVPSLLQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x71, 0x73, 0xF6, 0x02]), VPSLLQ(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x89, 0xF3, 0xCB]), VPSLLQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xF3, 0x4C, 0xC2, 0xB3]), VPSLLQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x6D, 0x73, 0xF7, 0x02]), VPSLLQ(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xF3, 0xD3]), VPSLLQ(ymm2, ymm15, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xF3, 0x54, 0xC2, 0xB3]), VPSLLQ(ymm2, ymm15, oword[r10 + rax*8 - 77]).encode())


class TestVPSRLW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x71, 0x71, 0xD6, 0x02]), VPSRLW(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x89, 0xD1, 0xCB]), VPSRLW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xD1, 0x4C, 0xC2, 0xB3]), VPSRLW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x6D, 0x71, 0xD7, 0x02]), VPSRLW(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xD1, 0xD3]), VPSRLW(ymm2, ymm15, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xD1, 0x54, 0xC2, 0xB3]), VPSRLW(ymm2, ymm15, oword[r10 + rax*8 - 77]).encode())


class TestVPSRLD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x71, 0x72, 0xD6, 0x02]), VPSRLD(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x89, 0xD2, 0xCB]), VPSRLD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xD2, 0x4C, 0xC2, 0xB3]), VPSRLD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x6D, 0x72, 0xD7, 0x02]), VPSRLD(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xD2, 0xD3]), VPSRLD(ymm2, ymm15, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xD2, 0x54, 0xC2, 0xB3]), VPSRLD(ymm2, ymm15, oword[r10 + rax*8 - 77]).encode())


class TestVPSRLQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x71, 0x73, 0xD6, 0x02]), VPSRLQ(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x89, 0xD3, 0xCB]), VPSRLQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xD3, 0x4C, 0xC2, 0xB3]), VPSRLQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x6D, 0x73, 0xD7, 0x02]), VPSRLQ(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xD3, 0xD3]), VPSRLQ(ymm2, ymm15, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xD3, 0x54, 0xC2, 0xB3]), VPSRLQ(ymm2, ymm15, oword[r10 + rax*8 - 77]).encode())


class TestVPSRAW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x71, 0x71, 0xE6, 0x02]), VPSRAW(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x89, 0xE1, 0xCB]), VPSRAW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xE1, 0x4C, 0xC2, 0xB3]), VPSRAW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x6D, 0x71, 0xE7, 0x02]), VPSRAW(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xE1, 0xD3]), VPSRAW(ymm2, ymm15, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xE1, 0x54, 0xC2, 0xB3]), VPSRAW(ymm2, ymm15, oword[r10 + rax*8 - 77]).encode())


class TestVPSRAD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x71, 0x72, 0xE6, 0x02]), VPSRAD(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x89, 0xE2, 0xCB]), VPSRAD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xE2, 0x4C, 0xC2, 0xB3]), VPSRAD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x6D, 0x72, 0xE7, 0x02]), VPSRAD(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xE2, 0xD3]), VPSRAD(ymm2, ymm15, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xE2, 0x54, 0xC2, 0xB3]), VPSRAD(ymm2, ymm15, oword[r10 + rax*8 - 77]).encode())


class TestVPSLLVD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x47, 0xCB]), VPSLLVD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x47, 0x4C, 0xC2, 0xB3]), VPSLLVD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x47, 0xD4]), VPSLLVD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x47, 0x54, 0xD9, 0xBE]), VPSLLVD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSLLVQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x89, 0x47, 0xCB]), VPSLLVQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x89, 0x47, 0x4C, 0xC2, 0xB3]), VPSLLVQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x85, 0x47, 0xD4]), VPSLLVQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x85, 0x47, 0x54, 0xD9, 0xBE]), VPSLLVQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSRLVD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x45, 0xCB]), VPSRLVD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x45, 0x4C, 0xC2, 0xB3]), VPSRLVD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x45, 0xD4]), VPSRLVD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x45, 0x54, 0xD9, 0xBE]), VPSRLVD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSRLVQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x89, 0x45, 0xCB]), VPSRLVQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x89, 0x45, 0x4C, 0xC2, 0xB3]), VPSRLVQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x85, 0x45, 0xD4]), VPSRLVQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x85, 0x45, 0x54, 0xD9, 0xBE]), VPSRLVQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSRAVD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x46, 0xCB]), VPSRAVD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x46, 0x4C, 0xC2, 0xB3]), VPSRAVD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x46, 0xD4]), VPSRAVD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x46, 0x54, 0xD9, 0xBE]), VPSRAVD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMULLW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xD5, 0xCB]), VPMULLW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xD5, 0x4C, 0xC2, 0xB3]), VPMULLW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xD5, 0xD4]), VPMULLW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xD5, 0x54, 0xD9, 0xBE]), VPMULLW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMULHW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xE5, 0xCB]), VPMULHW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xE5, 0x4C, 0xC2, 0xB3]), VPMULHW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xE5, 0xD4]), VPMULHW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xE5, 0x54, 0xD9, 0xBE]), VPMULHW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMULHUW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xE4, 0xCB]), VPMULHUW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xE4, 0x4C, 0xC2, 0xB3]), VPMULHUW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xE4, 0xD4]), VPMULHUW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xE4, 0x54, 0xD9, 0xBE]), VPMULHUW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMULLD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x40, 0xCB]), VPMULLD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x40, 0x4C, 0xC2, 0xB3]), VPMULLD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x40, 0xD4]), VPMULLD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x40, 0x54, 0xD9, 0xBE]), VPMULLD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMULDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x28, 0xCB]), VPMULDQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x28, 0x4C, 0xC2, 0xB3]), VPMULDQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x28, 0xD4]), VPMULDQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x28, 0x54, 0xD9, 0xBE]), VPMULDQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMULUDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xF4, 0xCB]), VPMULUDQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xF4, 0x4C, 0xC2, 0xB3]), VPMULUDQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xF4, 0xD4]), VPMULUDQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xF4, 0x54, 0xD9, 0xBE]), VPMULUDQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMULHRSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x0B, 0xCB]), VPMULHRSW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x0B, 0x4C, 0xC2, 0xB3]), VPMULHRSW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x0B, 0xD4]), VPMULHRSW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x0B, 0x54, 0xD9, 0xBE]), VPMULHRSW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMADDWD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xF5, 0xCB]), VPMADDWD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xF5, 0x4C, 0xC2, 0xB3]), VPMADDWD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xF5, 0xD4]), VPMADDWD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xF5, 0x54, 0xD9, 0xBE]), VPMADDWD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPMADDUBSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x04, 0xCB]), VPMADDUBSW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x04, 0x4C, 0xC2, 0xB3]), VPMADDUBSW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x04, 0xD4]), VPMADDUBSW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x04, 0x54, 0xD9, 0xBE]), VPMADDUBSW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPAVGB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xE0, 0xCB]), VPAVGB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xE0, 0x4C, 0xC2, 0xB3]), VPAVGB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xE0, 0xD4]), VPAVGB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xE0, 0x54, 0xD9, 0xBE]), VPAVGB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPAVGW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xE3, 0xCB]), VPAVGW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xE3, 0x4C, 0xC2, 0xB3]), VPAVGW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xE3, 0xD4]), VPAVGW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xE3, 0x54, 0xD9, 0xBE]), VPAVGW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSADBW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xF6, 0xCB]), VPSADBW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xF6, 0x4C, 0xC2, 0xB3]), VPSADBW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xF6, 0xD4]), VPSADBW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xF6, 0x54, 0xD9, 0xBE]), VPSADBW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVMPSADBW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x42, 0xCB, 0x02]), VMPSADBW(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x42, 0x4C, 0xC2, 0xB3, 0x02]), VMPSADBW(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x42, 0xD4, 0x02]), VMPSADBW(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x42, 0x54, 0xD9, 0xBE, 0x02]), VMPSADBW(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPHMINPOSUW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x41, 0xCE]), VPHMINPOSUW(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x41, 0x4C, 0xC2, 0xB3]), VPHMINPOSUW(xmm1, oword[r10 + rax*8 - 77]).encode())


class TestVPCMPEQB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x74, 0xCB]), VPCMPEQB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x74, 0x4C, 0xC2, 0xB3]), VPCMPEQB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x74, 0xD4]), VPCMPEQB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x74, 0x54, 0xD9, 0xBE]), VPCMPEQB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPCMPEQW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x75, 0xCB]), VPCMPEQW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x75, 0x4C, 0xC2, 0xB3]), VPCMPEQW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x75, 0xD4]), VPCMPEQW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x75, 0x54, 0xD9, 0xBE]), VPCMPEQW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPCMPEQD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x76, 0xCB]), VPCMPEQD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x76, 0x4C, 0xC2, 0xB3]), VPCMPEQD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x76, 0xD4]), VPCMPEQD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x76, 0x54, 0xD9, 0xBE]), VPCMPEQD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPCMPEQQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x29, 0xCB]), VPCMPEQQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x29, 0x4C, 0xC2, 0xB3]), VPCMPEQQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x29, 0xD4]), VPCMPEQQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x29, 0x54, 0xD9, 0xBE]), VPCMPEQQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPCMPGTB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x64, 0xCB]), VPCMPGTB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x64, 0x4C, 0xC2, 0xB3]), VPCMPGTB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x64, 0xD4]), VPCMPGTB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x64, 0x54, 0xD9, 0xBE]), VPCMPGTB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPCMPGTW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x65, 0xCB]), VPCMPGTW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x65, 0x4C, 0xC2, 0xB3]), VPCMPGTW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x65, 0xD4]), VPCMPGTW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x65, 0x54, 0xD9, 0xBE]), VPCMPGTW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPCMPGTD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x66, 0xCB]), VPCMPGTD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x66, 0x4C, 0xC2, 0xB3]), VPCMPGTD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x66, 0xD4]), VPCMPGTD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x66, 0x54, 0xD9, 0xBE]), VPCMPGTD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPCMPGTQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x37, 0xCB]), VPCMPGTQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x37, 0x4C, 0xC2, 0xB3]), VPCMPGTQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x37, 0xD4]), VPCMPGTQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x37, 0x54, 0xD9, 0xBE]), VPCMPGTQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPABSB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x1C, 0xCE]), VPABSB(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x1C, 0x4C, 0xC2, 0xB3]), VPABSB(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x1C, 0xD7]), VPABSB(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x1C, 0x54, 0xD9, 0xBE]), VPABSB(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVPABSW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x1D, 0xCE]), VPABSW(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x1D, 0x4C, 0xC2, 0xB3]), VPABSW(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x1D, 0xD7]), VPABSW(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x1D, 0x54, 0xD9, 0xBE]), VPABSW(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVPABSD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x1E, 0xCE]), VPABSD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x1E, 0x4C, 0xC2, 0xB3]), VPABSD(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x1E, 0xD7]), VPABSD(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x1E, 0x54, 0xD9, 0xBE]), VPABSD(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVPSIGNB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x08, 0xCB]), VPSIGNB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x08, 0x4C, 0xC2, 0xB3]), VPSIGNB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x08, 0xD4]), VPSIGNB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x08, 0x54, 0xD9, 0xBE]), VPSIGNB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSIGNW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x09, 0xCB]), VPSIGNW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x09, 0x4C, 0xC2, 0xB3]), VPSIGNW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x09, 0xD4]), VPSIGNW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x09, 0x54, 0xD9, 0xBE]), VPSIGNW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSIGND(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x0A, 0xCB]), VPSIGND(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x0A, 0x4C, 0xC2, 0xB3]), VPSIGND(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x0A, 0xD4]), VPSIGND(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x0A, 0x54, 0xD9, 0xBE]), VPSIGND(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPAND(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xDB, 0xCB]), VPAND(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xDB, 0x4C, 0xC2, 0xB3]), VPAND(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xDB, 0xD4]), VPAND(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xDB, 0x54, 0xD9, 0xBE]), VPAND(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPANDN(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xDF, 0xCB]), VPANDN(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xDF, 0x4C, 0xC2, 0xB3]), VPANDN(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xDF, 0xD4]), VPANDN(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xDF, 0x54, 0xD9, 0xBE]), VPANDN(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPOR(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xEB, 0xCB]), VPOR(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xEB, 0x4C, 0xC2, 0xB3]), VPOR(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xEB, 0xD4]), VPOR(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xEB, 0x54, 0xD9, 0xBE]), VPOR(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPXOR(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0xEF, 0xCB]), VPXOR(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0xEF, 0x4C, 0xC2, 0xB3]), VPXOR(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0xEF, 0xD4]), VPXOR(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0xEF, 0x54, 0xD9, 0xBE]), VPXOR(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPBLENDW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x0E, 0xCB, 0x02]), VPBLENDW(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x0E, 0x4C, 0xC2, 0xB3, 0x02]), VPBLENDW(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x0E, 0xD4, 0x02]), VPBLENDW(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x0E, 0x54, 0xD9, 0xBE, 0x02]), VPBLENDW(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPBLENDVB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x4C, 0xCB, 0x90]), VPBLENDVB(xmm1, xmm14, xmm3, xmm9).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x4C, 0x4C, 0xC2, 0xB3, 0x90]), VPBLENDVB(xmm1, xmm14, oword[r10 + rax*8 - 77], xmm9).encode())
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x4C, 0xD4, 0xA0]), VPBLENDVB(ymm2, ymm15, ymm4, ymm10).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x4C, 0x54, 0xD9, 0xBE, 0xA0]), VPBLENDVB(ymm2, ymm15, hword[r9 + rbx*8 - 66], ymm10).encode())


class TestVPBLENDD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x02, 0xCB, 0x02]), VPBLENDD(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x02, 0x4C, 0xC2, 0xB3, 0x02]), VPBLENDD(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x02, 0xD4, 0x02]), VPBLENDD(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x02, 0x54, 0xD9, 0xBE, 0x02]), VPBLENDD(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPUNPCKLBW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x60, 0xCB]), VPUNPCKLBW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x60, 0x4C, 0xC2, 0xB3]), VPUNPCKLBW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x60, 0xD4]), VPUNPCKLBW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x60, 0x54, 0xD9, 0xBE]), VPUNPCKLBW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPUNPCKLWD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x61, 0xCB]), VPUNPCKLWD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x61, 0x4C, 0xC2, 0xB3]), VPUNPCKLWD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x61, 0xD4]), VPUNPCKLWD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x61, 0x54, 0xD9, 0xBE]), VPUNPCKLWD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPUNPCKLDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x62, 0xCB]), VPUNPCKLDQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x62, 0x4C, 0xC2, 0xB3]), VPUNPCKLDQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x62, 0xD4]), VPUNPCKLDQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x62, 0x54, 0xD9, 0xBE]), VPUNPCKLDQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPUNPCKLQDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x6C, 0xCB]), VPUNPCKLQDQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x6C, 0x4C, 0xC2, 0xB3]), VPUNPCKLQDQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x6C, 0xD4]), VPUNPCKLQDQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x6C, 0x54, 0xD9, 0xBE]), VPUNPCKLQDQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPUNPCKHBW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x68, 0xCB]), VPUNPCKHBW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x68, 0x4C, 0xC2, 0xB3]), VPUNPCKHBW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x68, 0xD4]), VPUNPCKHBW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x68, 0x54, 0xD9, 0xBE]), VPUNPCKHBW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPUNPCKHWD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x69, 0xCB]), VPUNPCKHWD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x69, 0x4C, 0xC2, 0xB3]), VPUNPCKHWD(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x69, 0xD4]), VPUNPCKHWD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x69, 0x54, 0xD9, 0xBE]), VPUNPCKHWD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPUNPCKHDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x6A, 0xCB]), VPUNPCKHDQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x6A, 0x4C, 0xC2, 0xB3]), VPUNPCKHDQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x6A, 0xD4]), VPUNPCKHDQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x6A, 0x54, 0xD9, 0xBE]), VPUNPCKHDQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPUNPCKHQDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x6D, 0xCB]), VPUNPCKHQDQ(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x6D, 0x4C, 0xC2, 0xB3]), VPUNPCKHQDQ(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x6D, 0xD4]), VPUNPCKHQDQ(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x6D, 0x54, 0xD9, 0xBE]), VPUNPCKHQDQ(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPACKSSWB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x63, 0xCB]), VPACKSSWB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x63, 0x4C, 0xC2, 0xB3]), VPACKSSWB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x63, 0xD4]), VPACKSSWB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x63, 0x54, 0xD9, 0xBE]), VPACKSSWB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPACKSSDW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x6B, 0xCB]), VPACKSSDW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x6B, 0x4C, 0xC2, 0xB3]), VPACKSSDW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x6B, 0xD4]), VPACKSSDW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x6B, 0x54, 0xD9, 0xBE]), VPACKSSDW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPACKUSWB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x89, 0x67, 0xCB]), VPACKUSWB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x09, 0x67, 0x4C, 0xC2, 0xB3]), VPACKUSWB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC5, 0x85, 0x67, 0xD4]), VPACKUSWB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x05, 0x67, 0x54, 0xD9, 0xBE]), VPACKUSWB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPACKUSDW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x2B, 0xCB]), VPACKUSDW(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x2B, 0x4C, 0xC2, 0xB3]), VPACKUSDW(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x2B, 0xD4]), VPACKUSDW(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x2B, 0x54, 0xD9, 0xBE]), VPACKUSDW(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSHUFB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x09, 0x00, 0xCB]), VPSHUFB(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x09, 0x00, 0x4C, 0xC2, 0xB3]), VPSHUFB(xmm1, xmm14, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x00, 0xD4]), VPSHUFB(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x00, 0x54, 0xD9, 0xBE]), VPSHUFB(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPSHUFLW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0x70, 0xCE, 0x02]), VPSHUFLW(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0x70, 0x4C, 0xC2, 0xB3, 0x02]), VPSHUFLW(xmm1, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7F, 0x70, 0xD7, 0x02]), VPSHUFLW(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7F, 0x70, 0x54, 0xD9, 0xBE, 0x02]), VPSHUFLW(ymm2, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPSHUFHW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x70, 0xCE, 0x02]), VPSHUFHW(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x70, 0x4C, 0xC2, 0xB3, 0x02]), VPSHUFHW(xmm1, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0x70, 0xD7, 0x02]), VPSHUFHW(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0x70, 0x54, 0xD9, 0xBE, 0x02]), VPSHUFHW(ymm2, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPSHUFD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x70, 0xCE, 0x02]), VPSHUFD(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x70, 0x4C, 0xC2, 0xB3, 0x02]), VPSHUFD(xmm1, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x70, 0xD7, 0x02]), VPSHUFD(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x70, 0x54, 0xD9, 0xBE, 0x02]), VPSHUFD(ymm2, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPERMD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE2, 0x05, 0x36, 0xD4]), VPERMD(ymm2, ymm15, ymm4).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x05, 0x36, 0x54, 0xD9, 0xBE]), VPERMD(ymm2, ymm15, hword[r9 + rbx*8 - 66]).encode())


class TestVPERMQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC3, 0xFD, 0x00, 0xD7, 0x02]), VPERMQ(ymm2, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0xFD, 0x00, 0x54, 0xD9, 0xBE, 0x02]), VPERMQ(ymm2, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPSLLDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x71, 0x73, 0xFE, 0x02]), VPSLLDQ(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x6D, 0x73, 0xFF, 0x02]), VPSLLDQ(ymm2, ymm15, 2).encode())


class TestVPSRLDQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x71, 0x73, 0xDE, 0x02]), VPSRLDQ(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x6D, 0x73, 0xDF, 0x02]), VPSRLDQ(ymm2, ymm15, 2).encode())


class TestVPALIGNR(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x09, 0x0F, 0xCB, 0x02]), VPALIGNR(xmm1, xmm14, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x09, 0x0F, 0x4C, 0xC2, 0xB3, 0x02]), VPALIGNR(xmm1, xmm14, oword[r10 + rax*8 - 77], 2).encode())
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x0F, 0xD4, 0x02]), VPALIGNR(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x0F, 0x54, 0xD9, 0xBE, 0x02]), VPALIGNR(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPBROADCASTB(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x78, 0xCE]), VPBROADCASTB(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x78, 0x4C, 0xBE, 0x85]), VPBROADCASTB(xmm1, byte[r14 + rdi*4 - 123]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x78, 0xD6]), VPBROADCASTB(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x78, 0x54, 0xBE, 0x85]), VPBROADCASTB(ymm2, byte[r14 + rdi*4 - 123]).encode())


class TestVPBROADCASTW(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x79, 0xCE]), VPBROADCASTW(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x79, 0x4C, 0xED, 0x95]), VPBROADCASTW(xmm1, word[r13 + rbp*8 - 107]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x79, 0xD6]), VPBROADCASTW(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x79, 0x54, 0xED, 0x95]), VPBROADCASTW(ymm2, word[r13 + rbp*8 - 107]).encode())


class TestVPBROADCASTD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x58, 0xCE]), VPBROADCASTD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x58, 0x4C, 0xCC, 0x9D]), VPBROADCASTD(xmm1, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x58, 0xD6]), VPBROADCASTD(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x58, 0x54, 0xCC, 0x9D]), VPBROADCASTD(ymm2, dword[r12 + rcx*8 - 99]).encode())


class TestVPBROADCASTQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x59, 0xCE]), VPBROADCASTQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x59, 0x4C, 0xD3, 0xA8]), VPBROADCASTQ(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x59, 0xD6]), VPBROADCASTQ(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x59, 0x54, 0xD3, 0xA8]), VPBROADCASTQ(ymm2, qword[r11 + rdx*8 - 88]).encode())


class TestVPCMPESTRI(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x61, 0xCE, 0x02]), VPCMPESTRI(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x61, 0x4C, 0xC2, 0xB3, 0x02]), VPCMPESTRI(xmm1, oword[r10 + rax*8 - 77], 2).encode())


class TestVPCMPESTRM(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x60, 0xCE, 0x02]), VPCMPESTRM(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x60, 0x4C, 0xC2, 0xB3, 0x02]), VPCMPESTRM(xmm1, oword[r10 + rax*8 - 77], 2).encode())


class TestVPCMPISTRI(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x63, 0xCE, 0x02]), VPCMPISTRI(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x63, 0x4C, 0xC2, 0xB3, 0x02]), VPCMPISTRI(xmm1, oword[r10 + rax*8 - 77], 2).encode())


class TestVPCMPISTRM(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x62, 0xCE, 0x02]), VPCMPISTRM(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x79, 0x62, 0x4C, 0xC2, 0xB3, 0x02]), VPCMPISTRM(xmm1, oword[r10 + rax*8 - 77], 2).encode())


class TestVCVTSS2SI(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x2D, 0xEE]), VCVTSS2SI(ebp, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x2D, 0x6C, 0xCC, 0x9D]), VCVTSS2SI(ebp, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0xFA, 0x2D, 0xCE]), VCVTSS2SI(rcx, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0xFA, 0x2D, 0x4C, 0xCC, 0x9D]), VCVTSS2SI(rcx, dword[r12 + rcx*8 - 99]).encode())


class TestVCVTTSS2SI(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x2C, 0xEE]), VCVTTSS2SI(ebp, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x2C, 0x6C, 0xCC, 0x9D]), VCVTTSS2SI(ebp, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0xFA, 0x2C, 0xCE]), VCVTTSS2SI(rcx, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0xFA, 0x2C, 0x4C, 0xCC, 0x9D]), VCVTTSS2SI(rcx, dword[r12 + rcx*8 - 99]).encode())


class TestVCVTSI2SS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x2A, 0xC8]), VCVTSI2SS(xmm1, xmm14, eax).encode())
        self.assertEqual(bytearray([0xC4, 0xE1, 0x8A, 0x2A, 0xC8]), VCVTSI2SS(xmm1, xmm14, rax).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x2A, 0x4C, 0xCC, 0x9D]), VCVTSI2SS(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x8A, 0x2A, 0x4C, 0xD3, 0xA8]), VCVTSI2SS(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVCVTSD2SI(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0x2D, 0xEE]), VCVTSD2SI(ebp, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0x2D, 0x6C, 0xD3, 0xA8]), VCVTSD2SI(ebp, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0xFB, 0x2D, 0xCE]), VCVTSD2SI(rcx, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0xFB, 0x2D, 0x4C, 0xD3, 0xA8]), VCVTSD2SI(rcx, qword[r11 + rdx*8 - 88]).encode())


class TestVCVTTSD2SI(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0x2C, 0xEE]), VCVTTSD2SI(ebp, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0x2C, 0x6C, 0xD3, 0xA8]), VCVTTSD2SI(ebp, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0xFB, 0x2C, 0xCE]), VCVTTSD2SI(rcx, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0xFB, 0x2C, 0x4C, 0xD3, 0xA8]), VCVTTSD2SI(rcx, qword[r11 + rdx*8 - 88]).encode())


class TestVCVTSI2SD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x2A, 0xC8]), VCVTSI2SD(xmm1, xmm14, eax).encode())
        self.assertEqual(bytearray([0xC4, 0xE1, 0x8B, 0x2A, 0xC8]), VCVTSI2SD(xmm1, xmm14, rax).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x2A, 0x4C, 0xCC, 0x9D]), VCVTSI2SD(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x8B, 0x2A, 0x4C, 0xD3, 0xA8]), VCVTSI2SD(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVCVTPS2DQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x5B, 0xCE]), VCVTPS2DQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x5B, 0x4C, 0xC2, 0xB3]), VCVTPS2DQ(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x5B, 0xD7]), VCVTPS2DQ(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x5B, 0x54, 0xD9, 0xBE]), VCVTPS2DQ(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVCVTTPS2DQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x5B, 0xCE]), VCVTTPS2DQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0x5B, 0x4C, 0xC2, 0xB3]), VCVTTPS2DQ(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0x5B, 0xD7]), VCVTTPS2DQ(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0x5B, 0x54, 0xD9, 0xBE]), VCVTTPS2DQ(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVCVTDQ2PS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x5B, 0xCE]), VCVTDQ2PS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x5B, 0x4C, 0xC2, 0xB3]), VCVTDQ2PS(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x5B, 0xD7]), VCVTDQ2PS(ymm2, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x5B, 0x54, 0xD9, 0xBE]), VCVTDQ2PS(ymm2, hword[r9 + rbx*8 - 66]).encode())


class TestVCVTPD2DQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0xE6, 0xCE]), VCVTPD2DQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7F, 0xE6, 0xCF]), VCVTPD2DQ(xmm1, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7B, 0xE6, 0x4C, 0xC2, 0xB3]), VCVTPD2DQ(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7F, 0xE6, 0x4C, 0xD9, 0xBE]), VCVTPD2DQ(xmm1, hword[r9 + rbx*8 - 66]).encode())


class TestVCVTTPD2DQ(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0xE6, 0xCE]), VCVTTPD2DQ(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0xE6, 0xCF]), VCVTTPD2DQ(xmm1, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0xE6, 0x4C, 0xC2, 0xB3]), VCVTTPD2DQ(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0xE6, 0x4C, 0xD9, 0xBE]), VCVTTPD2DQ(xmm1, hword[r9 + rbx*8 - 66]).encode())


class TestVCVTDQ2PD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0xE6, 0xCE]), VCVTDQ2PD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7A, 0xE6, 0x4C, 0xD3, 0xA8]), VCVTDQ2PD(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0xE6, 0xD6]), VCVTDQ2PD(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7E, 0xE6, 0x54, 0xC2, 0xB3]), VCVTDQ2PD(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVCVTSD2SS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8B, 0x5A, 0xCB]), VCVTSD2SS(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0B, 0x5A, 0x4C, 0xD3, 0xA8]), VCVTSD2SS(xmm1, xmm14, qword[r11 + rdx*8 - 88]).encode())


class TestVCVTSS2SD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0x8A, 0x5A, 0xCB]), VCVTSS2SD(xmm1, xmm14, xmm3).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x0A, 0x5A, 0x4C, 0xCC, 0x9D]), VCVTSS2SD(xmm1, xmm14, dword[r12 + rcx*8 - 99]).encode())


class TestVCVTPD2PS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x5A, 0xCE]), VCVTPD2PS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x5A, 0xCF]), VCVTPD2PS(xmm1, ymm15).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x79, 0x5A, 0x4C, 0xC2, 0xB3]), VCVTPD2PS(xmm1, oword[r10 + rax*8 - 77]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7D, 0x5A, 0x4C, 0xD9, 0xBE]), VCVTPD2PS(xmm1, hword[r9 + rbx*8 - 66]).encode())


class TestVCVTPS2PD(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x5A, 0xCE]), VCVTPS2PD(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0x5A, 0x4C, 0xD3, 0xA8]), VCVTPS2PD(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x5A, 0xD6]), VCVTPS2PD(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC1, 0x7C, 0x5A, 0x54, 0xC2, 0xB3]), VCVTPS2PD(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVCVTPS2PH(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x63, 0x79, 0x1D, 0xF1, 0x02]), VCVTPS2PH(xmm1, xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0x63, 0x7D, 0x1D, 0xF9, 0x02]), VCVTPS2PH(xmm1, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0x43, 0x79, 0x1D, 0x74, 0xD3, 0xA8, 0x02]), VCVTPS2PH(qword[r11 + rdx*8 - 88], xmm14, 2).encode())
        self.assertEqual(bytearray([0xC4, 0x43, 0x7D, 0x1D, 0x7C, 0xC2, 0xB3, 0x02]), VCVTPS2PH(oword[r10 + rax*8 - 77], ymm15, 2).encode())


class TestVCVTPH2PS(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x13, 0xCE]), VCVTPH2PS(xmm1, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x79, 0x13, 0x4C, 0xD3, 0xA8]), VCVTPH2PS(xmm1, qword[r11 + rdx*8 - 88]).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x13, 0xD6]), VCVTPH2PS(ymm2, xmm14).encode())
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x13, 0x54, 0xC2, 0xB3]), VCVTPH2PS(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVBROADCASTF128(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x1A, 0x54, 0xC2, 0xB3]), VBROADCASTF128(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVBROADCASTI128(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC2, 0x7D, 0x5A, 0x54, 0xC2, 0xB3]), VBROADCASTI128(ymm2, oword[r10 + rax*8 - 77]).encode())


class TestVEXTRACTF128(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x63, 0x7D, 0x19, 0xF9, 0x02]), VEXTRACTF128(xmm1, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0x43, 0x7D, 0x19, 0x7C, 0xC2, 0xB3, 0x02]), VEXTRACTF128(oword[r10 + rax*8 - 77], ymm15, 2).encode())


class TestVEXTRACTI128(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0x63, 0x7D, 0x39, 0xF9, 0x02]), VEXTRACTI128(xmm1, ymm15, 2).encode())
        self.assertEqual(bytearray([0xC4, 0x43, 0x7D, 0x39, 0x7C, 0xC2, 0xB3, 0x02]), VEXTRACTI128(oword[r10 + rax*8 - 77], ymm15, 2).encode())


class TestVINSERTF128(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x18, 0xD3, 0x02]), VINSERTF128(ymm2, ymm15, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x18, 0x54, 0xC2, 0xB3, 0x02]), VINSERTF128(ymm2, ymm15, oword[r10 + rax*8 - 77], 2).encode())


class TestVINSERTI128(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x38, 0xD3, 0x02]), VINSERTI128(ymm2, ymm15, xmm3, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x38, 0x54, 0xC2, 0xB3, 0x02]), VINSERTI128(ymm2, ymm15, oword[r10 + rax*8 - 77], 2).encode())


class TestVPERM2F128(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x06, 0xD4, 0x02]), VPERM2F128(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x06, 0x54, 0xD9, 0xBE, 0x02]), VPERM2F128(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVPERM2I128(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xE3, 0x05, 0x46, 0xD4, 0x02]), VPERM2I128(ymm2, ymm15, ymm4, 2).encode())
        self.assertEqual(bytearray([0xC4, 0xC3, 0x05, 0x46, 0x54, 0xD9, 0xBE, 0x02]), VPERM2I128(ymm2, ymm15, hword[r9 + rbx*8 - 66], 2).encode())


class TestVLDMXCSR(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0xAE, 0x54, 0xCC, 0x9D]), VLDMXCSR(dword[r12 + rcx*8 - 99]).encode())


class TestVSTMXCSR(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC4, 0xC1, 0x78, 0xAE, 0x5C, 0xCC, 0x9D]), VSTMXCSR(dword[r12 + rcx*8 - 99]).encode())


class TestVZEROUPPER(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0xF8, 0x77]), VZEROUPPER().encode())


class TestVZEROALL(unittest.TestCase):
    def runTest(self):
        self.assertEqual(bytearray([0xC5, 0xFC, 0x77]), VZEROALL().encode())


