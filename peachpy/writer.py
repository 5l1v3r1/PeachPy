# This file is part of Peach-Py package and is licensed under the Simplified BSD license.
#    See license.rst for the full text of the license.

active_writer = None


class AssemblyWriter:
    def __init__(self, output_path, assembly_format, input_path=None):
        if assembly_format not in {"go", "nasm", "masm", "gas"}:
            raise ValueError("Unknown assembly format: %s" % assembly_format)
        self.assembly_format = assembly_format
        self.output_path = output_path
        self.output_header = ""
        self.comment_prefix = {
            "go": "//",
            "nasm": ";",
            "masm": ";",
            "gas": "#"
        }[assembly_format]

        import peachpy
        if input_path is not None:
            header_linea = ["%s Generated by PeachPy %s from %s"
                            % (self.comment_prefix, peachpy.__version__, input_path), "", ""]
        else:
            header_linea = ["%s Generated by PeachPy %s" % (self.comment_prefix, peachpy.__version__), "", ""]

        import os
        self.output_header = os.linesep.join(header_linea)

        self.previous_writer = None

    def __enter__(self):
        global active_writer
        self.previous_writer = active_writer
        active_writer = self
        self.output_file = open(self.output_path, "w")
        self.output_file.write(self.output_header)
        self.output_file.flush()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        global active_writer
        active_writer = self.previous_writer
        self.previous_writer = None
        if exc_type is None:
            self.output_file.close()
            self.output_file = None
        else:
            import os
            os.unlink(self.output_file.name)
            self.output_file = None
            raise

    def add_function(self, function):
        import peachpy.x86_64.function
        assert isinstance(function, peachpy.x86_64.function.ABIFunction), \
            "Function must be bindinded to an ABI before its assembly can be used"

        function_code = function.format(self.assembly_format)

        import os
        self.output_file.write(function_code + os.linesep)
        self.output_file.flush()


class ELFWriter:
    def __init__(self, output_path, abi, input_path=None):
        from peachpy.formats.elf.image import Image
        from peachpy.formats.elf.section import TextSection

        self.output_path = output_path
        self.previous_writer = None
        self.abi = abi
        self.image = Image(abi, input_path)
        self.text_section = TextSection(abi)
        self.image.bind_section(self.text_section, ".text")

    def __enter__(self):
        global active_writer
        self.previous_writer = active_writer
        active_writer = self
        self.output_file = open(self.output_path, "w", buffering=0)
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        global active_writer
        active_writer = self.previous_writer
        self.previous_writer = None
        if exc_type is None:
            self.image.symtab.bind()
            self.output_file.write(self.image.as_bytearray)
            self.output_file.close()
            self.output_file = None
        else:
            import os
            os.unlink(self.output_file.name)
            self.output_file = None
            raise

    def add_function(self, function):
        import peachpy.x86_64.function
        assert isinstance(function, peachpy.x86_64.function.EncodedFunction), \
            "Function must be encoded before writing to ELF image"

        function_code = function.as_bytearray()

        from peachpy.formats.elf.symbol import Symbol, SymbolBinding, SymbolType
        function_symbol = Symbol(self.abi)
        function_symbol.name_index = self.image.strtab.add("dot_product")
        function_symbol.value = 0
        function_symbol.content_size = len(function_code)
        function_symbol.section_index = self.text_section.index
        function_symbol.binding = SymbolBinding.Global
        function_symbol.type = SymbolType.Function
        self.image.symtab.add(function_symbol)


class NullWriter:
    def __init__(self):
        pass

    def __enter__(self):
        global active_writer
        self.previous_writer = active_writer
        active_writer = None
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        global active_writer
        active_writer = self.previous_writer
        self.previous_writer = None
